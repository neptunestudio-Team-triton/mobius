//마이페이지 (미완)
import 'package:flutter/material.dart';
import 'package:flutter_application_1/Login.dart';
import 'dart:convert';
import 'package:http/http.dart' show Client;
import 'package:http/http.dart' as http;
import 'Login.dart';
import 'main.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:mqtt_client/mqtt_server_client.dart';
import 'eversize.dart';
import 'dart:io';
import 'dart:math' as math;
import 'dart:async';
import 'Autoge.dart';


String randomString(int length) {
    var rand = math.Random();
    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';

    String result = '';
    for (var i = 0; i < length; i++) {
      result += chars[rand.nextInt(chars.length)];
    }
    return result;
  }

class MyMqttPage extends StatefulWidget {

  @override
  State<MyMqttPage> createState() => _MyMqttPageState();
}

class _MyMqttPageState extends State<MyMqttPage> {
  double containerAngle = 0.0;
  TextEditingController angleController = TextEditingController();
  int _seconds = 0;
  bool _isRunning = false;
  late Timer _timer;

  int battery5value = 0;
  double gyro5value = 0.0;
  String wifi5data = '';
  int wifi3value = 0;
  Timer? countdownTimer;
  Duration myDuration = Duration(days: 5);

  

  // 10자리의 랜덤한 문자열 생성
  String random = randomString(10);



  MQTTClientManager mqttClientManager = MQTTClientManager();
  final String pubTopic = "/oneM2M/req/Sair1/Mobius2/json";
  Autogenerated autogenerated = Autogenerated();

  void initState() {
    setupMqttClient();
    setupUpdatesListener();
    super.initState();
  }

  void _Gomqttonedata() {

    countdownTimer = Timer.periodic(Duration(seconds: 1), (_) => _setCountDown());

    final items = [{"op": "1", "to": "/Mobius/air1/workstatus?rcn=0", "fr": "Sair1", "rqi": "21u3jfj29r", "ty": "4", "pc": {"m2m:cin": {"con":"1"}}}];

    var jitem = jsonEncode(items[0]);
    print(jitem);
    setState(() {
      mqttClientManager.publishMessage(pubTopic, jitem);
    });
    
  }

  
  void _Gomqtttwodata() {

    setState(() {countdownTimer!.cancel();});

    final items = [{"op": "1", "to": "/Mobius/air1/workstatus?rcn=0", "fr": "Sair1", "rqi": "h8gh89h89", "ty": "4", "pc": {"m2m:cin": {"con":"2"}}}];

    var jitem2 = jsonEncode(items[0]);
    print(jitem2);
    setState(() {
      mqttClientManager.publishMessage(pubTopic, jitem2);
    });
  }       
/*
  void _startTimer() {
    countdownTimer = Timer.periodic(Duration(seconds: 1), (_) => _setCountDown());
  }
  */

  // Step 4
  void _stopTimer() {
    setState(() => countdownTimer!.cancel());
  }

  // Step 5
  void resetTimer() {
    _stopTimer();
    setState(() => myDuration = Duration(days: 5));
  }

  // Step 6
  void _setCountDown() {
    final reduceSecondsBy = 1;
    setState(() {
      final seconds = myDuration.inSeconds + reduceSecondsBy;
      if (seconds < 0) {
        countdownTimer!.cancel();
      } else {
        myDuration = Duration(seconds: seconds);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    IconData iconData;
    String gyroData;
    String Wifivalue;
    IconData wifiIcondata;

    //배터리아이콘 입력받을곳(A 대신 변수받아야됨)
    if (0 < battery5value && 25 > battery5value ) {
      iconData = Icons.battery_1_bar;
    } else if (26 < battery5value && 50 >battery5value ) {
      iconData = Icons.battery_3_bar;
    } else if (51 < battery5value && 75 >battery5value ) {
      iconData = Icons.battery_5_bar;
    } else if (76 < battery5value) {
      iconData = Icons.battery_full;
    } else {
      iconData = Icons.battery_unknown;
    }
    //자이로값 입력받을곳(나중에 정확한 측정 필요)
    if (-15 < gyro5value && 15 > gyro5value ) {
      gyroData = 'Great';
    } else if (-35 < gyro5value && 35 > gyro5value) {
      gyroData = 'good';
    } else {
      gyroData = 'Bad';
    }
    //와이파이 아이콘 변수 받는곳
    if (wifi3value == 'A') {
      wifiIcondata = Icons.network_wifi_1_bar;
    } else if (wifi3value == 'B') {
      wifiIcondata = Icons.network_wifi_3_bar;
    } else if (wifi3value == 'C') {
      wifiIcondata = Icons.signal_wifi_4_bar;
    } else {
      wifiIcondata = Icons.wifi_off;
    }

    String strDigits(int n) => n.toString().padLeft(2, '0');
    final days = strDigits(myDuration.inDays);
    final hours = strDigits(myDuration.inHours.remainder(24));
    final minutes = strDigits(myDuration.inMinutes.remainder(60));
    final seconds = strDigits(myDuration.inSeconds.remainder(60));

    return Scaffold(
      appBar: AppBar(
        title: Text('Container 각도 변경'),
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Container(
              width: double.infinity,
              height: 120,
              //정확한 값이면 초록색
              color: Colors.amber,
              child: Transform.rotate(
                angle: gyro5value * (math.pi / 180),
                child: Stack(
                  alignment: Alignment.center,
                  children: [
                    Container(
                      width: 150,
                      height: 5,
                      color: Color.fromARGB(255, 0, 0, 0),
                    ),
                    Positioned(
                      top: 90,
                      child: Text(
                        '${gyro5value.toStringAsFixed(2)}°',
                        style: TextStyle(
                            fontSize: 20,
                            color: Color.fromARGB(255, 47, 105, 199)),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.end, children: <Widget>[
              Icon(
                iconData,
                size: 30,
              ),
            ]
          ),
            Text(
              gyroData,
              style: TextStyle(fontSize: 20),
            ),
            Text('$hours:$minutes:$seconds', style: TextStyle(fontSize: 35)),
            Row(mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[
              /*ElevatedButton(
                  onPressed: _startTimer,
                  child: Text(
                    'Start',
                    style: TextStyle(
                      fontSize: 20,
                    ),
                  )),
                  */
              ElevatedButton(
                onPressed: () {
                  if (countdownTimer == null || countdownTimer!.isActive) {
                    _stopTimer();
                  }
                },
                child: Text(
                  'Stop',
                  style: TextStyle(
                    fontSize: 20,
                  ),
                ),
              ),
              
              ElevatedButton(
                  onPressed: () {
                    resetTimer();
                  },
                  child: Text(
                    'Reset',
                    style: TextStyle(
                      fontSize: 20,
                    ),
                  )
                )
              ]
            ),
            Text(
              wifi5data,
              style: TextStyle(fontSize: 20),
            ),
            Icon(
              wifiIcondata,
              size: 20,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children : [
              ElevatedButton(
                onPressed: _Gomqttonedata,
                child: const Icon(Icons.arrow_circle_right),
                ),
              SizedBox(
                width: 20,
              ),
              ElevatedButton(
                onPressed: _Gomqtttwodata,
                child: const Icon(Icons.stop_circle))
              ]
            )
          ],
        ),
      ),
    );
  }

  Future<void> setupMqttClient() async {
    await mqttClientManager.connect();
    mqttClientManager.subscribe(pubTopic);
  }

  void setupUpdatesListener() {
    mqttClientManager
        .getMessagesStream()!
        .listen((List<MqttReceivedMessage<MqttMessage?>>? c) {
      final recMess = c![0].payload as MqttPublishMessage;
      
      String pt = MqttPublishPayload.bytesToStringAsString(recMess.payload.message);

      var alldataget = jsonDecode(pt)['to'];

      print(alldataget);

      
      
      if(alldataget == "/Mobius/air1/angle?rcn=0"){
        String jyrodataget = jsonDecode(pt)['pc']['m2m:cin']['con'];

        List<String> result = jyrodataget.split('/');
        String result0 = result[0];

        var gyro = double.parse(result0);

        print(gyro);
        
        setState(() {
          gyro5value = gyro;
        });
      }

      if(alldataget == '/Mobius/air1/battery?rcn=0'){
        String batdataget = jsonDecode(pt)['pc']['m2m:cin']['con'];
        var bat = int.parse(batdataget);
        setState(() {
          battery5value = bat;
        });
      }

      if(alldataget == '/Mobius/air1/rssi?rcn=0'){
        String wifiicondataget = jsonDecode(pt)['pc']['m2m:cin']['con'];
        var wificon = int.parse(wifiicondataget);
        setState(() {
          wifi3value = wificon;
        });
      }

      if(alldataget == '/Mobius/air1/ssid?rcn=0'){
        String wifidataget = jsonDecode(pt)['pc']['m2m:cin']['con'];
        var wifidataname = wifidataget;
        setState(() {
          wifi5data = wifidataname;
        });
      }
    
      //print(jsonstringmap);
      ///Mobius/air1/angle?rcn=0
      /*
      final Map<String, dynamic> data = new Map<String, dynamic>();
      data['m2m:rqp'] = pt;

      String fr = data['fr'];
      String to = data['to'];
      String op = data['op'];
      String rqi = data['rqi'];

      final Map<String, dynamic> data1 = new Map<String, dynamic>();
      data1['pc'] = data;

      final Map<String, dynamic> data2 = new Map<String, dynamic>();
      data2['m2m.cin'] = data1;

      String rn = data2['con'];
      
      print('fr: $fr');
      print('to: $to');
      print('op: $op');
      print('rqi: $rqi');
      print('rn: $rn');
      */
    
    });
  }

  @override
  void dispose() {
    mqttClientManager.disconnect();
    super.dispose();
  }
}


